@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Globalization
@using System.Text.Encodings.Web
@using System.Text.Unicode

@page "/Analyze"
<PageTitle>Analyzer</PageTitle>

<p>@text</p>


@code
{
    [SupplyParameterFromQuery]
    public string? filter { get; set; }

    [SupplyParameterFromQuery]
    public string? url { get; set; }

    [SupplyParameterFromQuery]
    public float? price { get; set; }

    public string? text { get; set; }


    private JsonSerializerOptions options = new JsonSerializerOptions
    {
        Encoder = JavaScriptEncoder.Create(UnicodeRanges.All),
        WriteIndented = true
    };


    protected override async Task OnInitializedAsync()
    {
        if(url == null)
        {
            // provide url
            return;
        }

        // Get Data from given URL
        List<ProductData> data = await GetFromUrl();

        if(filter == null)
        {
            GetAll(data);
        }
        else if(int.TryParse(filter, out int fType))
        {
            switch(fType)
            {
                case 1:
                    {
                        GetMostExpensiveAndCheapest(data);
                        break;
                    }
                case 2:
                    {
                        GetExcactPrice(data);
                        break;
                    }
                case 3:
                    {
                        GetMostBottles(data);
                        break;
                    }
                default:
                    {
                        GetAll(data);
                        break;
                    }
            }
        }
    }

    private string GetMostExpensiveAndCheapest(List<ProductData> data)
    {
        ProductData mostExpensive = data[0];
        float mostExpensivePrice = ExtractPriceFromText(mostExpensive.articles[0].pricePerUnitText);

        ProductData cheapest = mostExpensive;
        float cheapestPrice = mostExpensivePrice;

        foreach(var product in data)
        {
            if(product != null && product.articles != null && product.articles.Length > 0)
            {
                foreach(var article in product.articles)
                {
                    if(article.pricePerUnitText == null)
                    {
                        continue;
                    }

                    float price = ExtractPriceFromText(article.pricePerUnitText);

                    if(price > mostExpensivePrice)
                    {
                        mostExpensive = product;
                        mostExpensivePrice = price;
                    }
                    else if(price < cheapestPrice)
                    {
                        cheapest = product;
                        cheapestPrice = price;
                    }
                }
            }
        }

        text = "MostExpensive=" + JsonSerializer.Serialize(mostExpensive, options) + "--- Cheapest=" + JsonSerializer.Serialize(cheapest, options);

        return text;
    }

    private float ExtractPriceFromText(string text)
    {
        var match = Regex.Match(text.Replace(',', '.'), @"([-+]?[0-9]*\.?[0-9]+)");
        return Convert.ToSingle(match.Groups[1].Value, CultureInfo.InvariantCulture);
    }

    private string GetExcactPrice(List<ProductData> data)
    {
        if(price == null)
        {
            // provide price
            return null;
        }

        Dictionary<Article, float> matchWithPrice = new Dictionary<Article, float>();

        foreach(var product in data)
        {
            if(product != null && product.articles != null && product.articles.Length > 0)
            {
                foreach(var article in product.articles)
                {
                    if(article.pricePerUnitText == null)
                    {
                        continue;
                    }

                    if(article.price.ToString() == price.ToString())
                    {
                        matchWithPrice.Add(new Article(product.id, article), ExtractPriceFromText(article.pricePerUnitText));
                    }
                }
            }
        }

        matchWithPrice = matchWithPrice.OrderBy(kv => kv.Value).ToDictionary<Article, float>();

        text = JsonSerializer.Serialize(matchWithPrice.Keys.ToList(), options);

        return text;
    }

    private string GetMostBottles(List<ProductData> data)
    {
        ProductData mostBottlesProduct = null;
        int mostBottles = 0;

        foreach(var product in data)
        {
            if(product != null && product.articles != null && product.articles.Length > 0)
            {
                foreach(var article in product.articles)
                {
                    if(article.shortDescription == null)
                    {
                        continue;
                    }

                    int bottles = Convert.ToInt32(article.shortDescription.Split('x')[0].Trim());

                    if(bottles > mostBottles)
                    {
                        mostBottles = bottles;
                        mostBottlesProduct = product;
                    }
                }
            }
        }

        text = JsonSerializer.Serialize(mostBottlesProduct, options);

        return text;
    }

    private void GetAll(List<ProductData> data)
    {
        text = GetMostExpensiveAndCheapest(data) + " - " + GetExcactPrice(data) + " - " + GetMostBottles(data);
    }


    private async Task<List<ProductData>> GetFromUrl()
    {
        HttpClient client = new()
		{
			BaseAddress = new Uri(url)
		};

        HttpResponseMessage response = await client.GetAsync("");
        var jsonResponse = await response.Content.ReadAsStringAsync();

        return JsonSerializer.Deserialize<List<ProductData>>(jsonResponse);
    }


    private class Article
    {
        public int? productId { get; set; }

        public ProductData.Article article { get; set; }


        public Article(int? productId, ProductData.Article article)
        {
            this.productId = productId;
            this.article = article;
        }
    }
}
